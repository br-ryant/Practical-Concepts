#2 Before you start to write the next script, first run the 'who' command at the UNIX prompt and redirect it into a file named users.txt. (Then, look at the file and study its format!) Afterwards, write a program that reads in and uses the 'split' function to break up each line of the 'users.txt' file into three variables: who, where, and when_and_IP, and then reprints it to the screen in this format: who on where at when_and_IP. So, if your text input file contains three lines, I expect to see code that produce three lines of output, each of which will look like: bsd17 on ttyp0 at Aug09 08:07 (132.85.201.182). 
[bnguye43@bfx3 week10]$ who
tvan5    pts/7        2022-04-23 20:02 (10.249.71.81)
bnguye43 pts/10       2022-04-23 20:16 (10.249.2.168)

#!/usr/bin/env python3

import re

with open("users.txt") as imp:
    for line in imp:
        (who, where, ip) = re.split('\s+', line, 2)
        print(who + " on " + where + " at " + ip)
        
#prof- mine is short and to the point but not sure about the second argument in split   
import re

def main():
    for line in open('users.txt'):
        # split() without arguments splits on whitespace
        fields = line.split()

        # Some terminals don't report the last field for local users,
        # so I'll add it here.
        if len(fields) == 4:
            fields.append('')

        who = fields[0]
        where = fields[1]
        when_and_IP = "{0} {1} {2}".format(fields[2], fields[3], fields[4]);

        print("{0} on {1} at {2}".format(who, where, when_and_IP) )

if __name__ == '__main__':
    main()
    
    
#3 Write a program that loops through lines of a file, assuming each line of input will consist of just a single word (and a newline, of course). As it loops through each line, your program should print out any words that contain two vowels next to each other. The vowels do not have to be the same. You should create a test input file and make your script process it.

#!/usr/bin/env python3

import re

with open("ex03test.txt") as imp:
    for line in imp:
      if re.findall(r'[aeiouAEIOU]{2}', line):
        print (line)
        
#prof- re.I ignores captitalization so not need to put captital letters
import re

def main():
    for line in open('ex03test.txt'):
        line = line.rstrip()
        m = re.search(r"([aeiou]{2})", line, re.I)
        if m:
            print("Successful match to: {0} in {1}".format(m.group(1), line) )

if __name__ == '__main__':
    main()

#4 Write a program that takes a sentence with two adjectives describing an animal and reverses the adjectives, using regular expressions, and then outputs the new sentence. The sentence that it must read in should be of the following format, where the two adjectives are separated by a comma and a space:

The quick, brown fox jumped over some other non-descript animal. 

If that previous sentence was the input, then the program output should look like: 

The brown, quick fox jumped over some other non-descript animal. 

Note that everything is identical between the two sentences except for the adjectives switching places. You may make up your own sentence, as long as the adjectives are formatted as in this example. Remember, don't make your regular expression match this exact sentence – it should work with any other input sentence with comma separated words like this.

#!/usr/bin/env python3

import re

imp = "The little, shy fox jumped over the scary, brown bear."
sentence = re.sub(r'\s([a-zA-Z]*),\s([a-zA-Z]*)\s',r' \2, \1 ',imp)
print(sentence)

#prof - prof only can do one seperation whereas mine can do multiple commas
import re

def main():
    sentence = 'The quick, brown fox jumped over some other non-descript animal.'

    m = re.match(r"(.+?)(\S+), (\S+)(.+)", sentence)
    if m:
        print("{0}{2}, {1}{3}".format(m.group(1), m.group(2), m.group(3), m.group(4)))
    else:
        print("ERROR: sentence didn't match expected pattern.")

if __name__ == '__main__':
    main()


#5 In my home area you'll find a file named 'e_coli_k12_dh10b.faa'. It contains all of the polypeptide sequences in the E. coli K12 genome in FASTA format. Your task for this exercise is to generate an amino acid usage report with counts only, and in no particular order. Your output should look like this: 
T: 69645 
G: 95475 
V: 91683 
Y: 36836 
H: 29255 ….. 

#!/usr/bin/python3

with open("/home/jorvis/e_coli_k12_dh10b.faa") as imp:
    from collections import defaultdict
    counts = defaultdict(int)
    for line in imp:
        if line.startswith(">"):
            continue
        for char in line:
            if char in {"A", "B", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "Z"}:
                counts[char] += 1

    total = float(sum(counts.values()))

    for key,val in counts.items():
        print("{}: {}".format(key,val))

#prof

def main():
    aa = dict()

    # for line in open('/home/jorvis1/e_coli_k12_dh10b.faa'):
    for line in open('/home/jorvis/git/jhu-classes/compbio_410.634/e_coli_k12_dh10b.faa'):
        if line.startswith('>'):
            continue
        else:
            # by forcibly setting all letters to upper case we avoid any issues
            #  with mixed case.
            line = line.upper().rstrip()

            for base in line:
                # you don't have to do this if you use an defaultdict
                if base in aa:
                    aa[base] += 1
                else:
                    aa[base] = 1

    # now print the counts (in no particular order)
    for base in aa:
        print("{0}: {1}".format(base, aa[base]))

if __name__ == '__main__':
    main()
    
#prof recommended that we should not define our char and let the char be define themselves, revised version of my code would be below
#!/usr/bin/python3

from collections import defaultdict
counts = defaultdict(int)

with open("/home/jorvis/e_coli_k12_dh10b.faa") as file:
    for line in file:
        if line.startswith(">"):
            continue
        else:
            line = line.upper().rstrip()
        for char in line:
            counts[char] += 1

    for type,int in counts.items():
        print("{}: {}".format(type,in))


#6	Modify your script from #5 to display only the top 5 most frequently used amino acids and add their percentage use. The output should be like this: L: 139002 (10.7%) A: 123885 (9.6%) G: 95475 (7.4%) V: 91683 (7.1%) I: 77836 (6.0%)

#!/usr/bin/python3

with open("/home/jorvis/e_coli_k12_dh10b.faa") as imp:
    from collections import defaultdict
    counts = defaultdict(int)
    for line in imp:
        if line.startswith(">"):
            continue
        for char in line:
            if char in {"A", "B", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "Z"}:
                counts[char] += 1

    count = 0
    total = float(sum(counts.values()))
    for key,val in sorted(counts.items(), key=lambda kv: (kv[1]), reverse=True): 
        print("{}: {}, ({:.1%})".format(key,val, val / total))
        count = count + 1;
        if count >=5:
            break
            
#prof his code is a little wonky on this one actyally, percentages dont display and what is vi ban??
vi ban
#!/usr/bin/env python3

# sorted(data, key=data.get)
# sorted(data.items(), key=lambda x:x[1])

def main():
    aa = dict()
    seq_length = 0

    # for line in open('/home/jorvis1/e_coli_k12_dh10b.faa'):
    for line in open('/home/jorvis/Dropbox/jhu/compbio_410.634_python/e_coli_k12_dh10b.faa'):
        if line.startswith('>'):
            continue
        else:
            # by forcibly setting all letters to upper case we avoid any issues
            #  with mixed case.
            line = line.upper().rstrip()
            seq_length += len(line)

            for base in line:
                # you don't have to do this if you use an defaultdict
                if base in aa:
                    aa[base] += 1
                else:
                    aa[base] = 1

    # now print the counts (in reverse order, by value)
    for base in sorted(aa, key=aa.get, reverse=True)[0:5]:
        perc = (aa[base] / seq_length) * 100
        print("{0}: {1} ({2:.1f}%)".format(base, aa[base], perc))


if __name__ == '__main__':
    main()           

#modifying my new updated code to have top5- counts.items pulls up dict of items, key=lambda defines key as I want to pick category from counts.items to sort and kv: (kv[1]) allows for the "2nd" category to be picked. If kv[0] woulod be sorted by alphabetical
#!/usr/bin/python3

from collections import defaultdict
counts = defaultdict(int)

with open("/home/jorvis/e_coli_k12_dh10b.faa") as file:
    for line in file:
        if line.startswith(">"):
            continue
        else:
            line = line.upper().rstrip()
        for char in line:
            counts[char] += 1
            
    total =float(sum(counts.values()))
    count = 0
    
    for key,val in sorted(counts.items(), key=lambda kv: (kv[1]), reverse=True)[0:5]: 
        print("{}: {}, ({:.1%})".format(key,val, val / total))

#7 Create a single module file with at least one class definition. It should have at least three attributes and two methods. At least one of the methods needs to take an argument to change how it behaves. - Create a test script which uses and shows off the features of your module. 

#prof example

#!/usr/bin/env python3 (FILE 1)

import re

class Entry:
    """
    Simple class to represent a single FASTA entry.  For this demo it's assumed the
    entry type is a nucleotide sequence.
    """
    def __init__(self, id=None, title=None, seq=None):
        self.id = id
        self.title = title
        self.seq = seq


    def load_from_file(self, file_path):
        """
        This is a demo only which expects an input FASTA file with only a single
        entry within it.  Will test for more and error if it files more than one.
        """
        seqs_found = 0

        for line in open(file_path):
            line = line.rstrip()
            
            if line.startswith('>'):
                if seqs_found == 0:
                    m = re.match(">(\S+)\s*(.*)", line)
                    if m:
                        self.id = m.group(1)
                        self.title = m.group(2)
                else:
                    raise Exception("Error, expected a single-entry FASTA file but found more.")
            else:
                if self.seq is None:
                    self.seq = line
                else:
                    self.seq += line


    def start_codon(self):
        """
        Returns the first three bases of the FASTA sequence
        """
        return self.seq[0:3]


    def wrapped(self, every=60):
        """
        Pass a string of residues (nucleotide or polypeptides) that has NO whitespace and
        this will return another string with new line characters inserted every N residues.
        N is specified with the 'every' parameter with a default of 60.  For example:
        new_fasta = wrapped_fasta(some_string, every=60)

        This runs orders of magnitude faster than using the textwrap module.
        """
        return '\n'.join(self.seq[i:i+every] for i in range(0, len(self.seq), every))
        
#FILE 2

import fasta

def main():
    entry = fasta.Entry()
    entry.load_from_file('test_fasta.fna')

    print("Sequence ID: {0}".format( entry.id ))
    print("Length: {0} bp".format( len(entry.seq) ))
    print("Start codon is: {0}".format( entry.start_codon() ))
    print("The sequence is:\n{0}".format( entry.wrapped()))


if __name__ == '__main__':
    main()

#mine 

#!/usr/bin/env python3

import re

class Patient:
    def __init__(self, name=None, dob=None, seq=None):
        self.name = name
        self.dob = dob
        self.seq = seq


    def load_from_file(self, file_path):
        seqs_found = 0

        for line in open(file_path):
            line = line.rstrip()

            if line.startswith('>'):
                if seqs_found == 0:
                    m = re.match(">(\S+)\s*DOB(.*)", line)
                    if m:
                        self.name = m.group(1)
                        self.dob = m.group(2)
                 else:
                    raise Exception("Error, expected one patient.")
            else:
                if self.seq is None:
                    self.seq = line
                else:
                    self.seq += line

    def nft(self):
        output = []
        for character in self.seq:
            number = ord(character) - 65
            output.append(number)
        return output

#second file
#!/usr/bin/env python3

import ex01

def main():
    entry = ex01.Patient()
    entry.load_from_file('test_patient.txt')

    print("Name: {0}".format( entry.name ))
    print("DOB: {0}".format( entry.dob ))
    print("Seq: {0}".format( entry.seq ))
    print("Integer: {0}".format( entry.nft() ))

if __name__ == '__main__':
    main()

(test_patient.txt)
>Bryant_Nguyen DOB 03/29/1998
AGTTCCTTAACCATGAATCTCTCAACGCCTTAGTATGTTCTACCCGACCACGTGTGTCCGTTTGCGGTACGGGTGCCGCA
TGGGTTAAGCTTAGCGGATTTTCTCGGGAGTATGATTACCCACACTATCAGATTCCTCCGAGGAGGACTCCGTACTCTCA
AGTTCAGCTCGGACGGTGGATTTGCCTGCCATCCTCAACGCCTACACTCTTCAACGGGGACTTCCGTCGCCCCGCGGTGG
TTTCACTGCTCCGTCTCCACGTCGCCCCATGCGGCAGTGACGGAATATTAACCGTCTCTGCCATCGCCATCGCCGTTCGG
CTTAGACTTAGGACCCGACTGACCCCGGGCTGATTGGCATTGCCCGGGAAACCTTGGTCTTACAGCGGGAGGGAATCTAA
CCCTCCTTATCGTTACTTATTCCTACATTTGCTTTACTCACCGCTCCAGGATAACTTACGTACACCATTCCACGCTGTGA
GTATGCTCCCCTACCGATACTTTCTTAAATGCTATCCCGCGCCTTCGGTGTCTGCCTTATACCCGATTATTATCCATGCC
CGGACCCTCGACTAGTGAGCTGTTACGCACTCTTTGAATGAATGGCTGCTTCCAAGCCAACATCCTAGCTGTCATAGGGA
CCAGACTTCGTTAGACTAACTCAGGCAGAACTCCGGGACCTTAGACGGCGGTCTGGATTCTTCTCCTCTCGGGGACGGAC
CTTA

































































